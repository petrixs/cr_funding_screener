package bot

import (
	"fmt"
	"log"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"encoding/json"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/petrixs/cr-exchanges"
)

type Bot struct {
	bot       *tgbotapi.BotAPI
	exchanges []exchanges.Exchange
	cache     *exchanges.RatesCache
}

var (
	subscribers     = make(map[int64]struct{})
	subscribersLock sync.Mutex

	userThresholds     = make(map[int64]float64)
	userThresholdsLock sync.Mutex

	settingsFile = "settings.json"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
type Settings struct {
	Subscribers []int64           `json:"subscribers"`
	Thresholds  map[int64]float64 `json:"thresholds"`
}

// loadSettings –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
func loadSettings() {
	file, err := os.Open(settingsFile)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫: %v", err)
		return
	}
	defer file.Close()

	var settings Settings
	if err := json.NewDecoder(file).Decode(&settings); err == nil {
		subscribersLock.Lock()
		for _, id := range settings.Subscribers {
			subscribers[id] = struct{}{}
		}
		subscribersLock.Unlock()
		log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: %d", len(settings.Subscribers))

		userThresholdsLock.Lock()
		userThresholds = settings.Thresholds
		userThresholdsLock.Unlock()
		log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ—Ä–æ–≥–æ–≤: %d", len(settings.Thresholds))
	} else {
		log.Printf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: %v", err)
	}
}

// saveSettings —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª
func saveSettings() {
	subscribersLock.Lock()
	userThresholdsLock.Lock()

	subscribers_list := make([]int64, 0, len(subscribers))
	for id := range subscribers {
		subscribers_list = append(subscribers_list, id)
	}

	settings := Settings{
		Subscribers: subscribers_list,
		Thresholds:  userThresholds,
	}

	subscribersLock.Unlock()
	userThresholdsLock.Unlock()

	file, err := os.Create(settingsFile)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: %v", err)
		return
	}
	defer file.Close()

	if err := json.NewEncoder(file).Encode(settings); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: %v", err)
	}
}

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ä–æ–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func getUserThreshold(userID int64) (float64, string) {
	userThresholdsLock.Lock()
	defer userThresholdsLock.Unlock()
	if t, ok := userThresholds[userID]; ok {
		return t, "user"
	}
	// –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	return getDefaultThreshold(), "default"
}

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func setUserThreshold(userID int64, threshold float64) {
	userThresholdsLock.Lock()
	userThresholds[userID] = threshold
	userThresholdsLock.Unlock()
	saveSettings()
}

// –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –∏–∑ .env
func getDefaultThreshold() float64 {
	val := os.Getenv("DEFAULT_FUNDING_THRESHOLD")
	if val == "" {
		return 0.001 // 0.1% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	// –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
	val = strings.TrimSuffix(val, "%")

	f, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return 0.001
	}
	return f
}

func NewBot(token string, exs []exchanges.Exchange) *Bot {
	log.Println("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞...")
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:", err)
	}

	log.Printf("–ë–æ—Ç —Å–æ–∑–¥–∞–Ω: @%s", bot.Self.UserName)
	return &Bot{
		bot:       bot,
		exchanges: exs,
		cache:     exchanges.GetGlobalCache(),
	}
}

func (b *Bot) Start() error {
	log.Println("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
	loadSettings()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å—Ç–∞–≤–æ–∫
	go b.startRatesUpdateLoop()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	go b.startBroadcastLoop()

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.bot.GetUpdatesChan(u)
	for update := range updates {
		if update.Message == nil {
			continue
		}

		go b.handleMessage(update.Message)
	}

	return nil
}

func (b *Bot) startRatesUpdateLoop() {
	ticker := time.NewTicker(2 * time.Minute)
	defer ticker.Stop()

	for {
		b.updateAllRates()
		<-ticker.C
	}
}

func (b *Bot) updateAllRates() {
	var wg sync.WaitGroup
	for _, ex := range b.exchanges {
		wg.Add(1)
		go func(exchange exchanges.Exchange) {
			defer wg.Done()
			if err := b.cache.UpdateRates(exchange); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –¥–ª—è %s: %v", exchange.GetName(), err)
			}
		}(ex)
	}
	wg.Wait()
}

func (b *Bot) handleRates(msg *tgbotapi.Message) {
	rates := b.cache.GetAllRates()
	if len(rates) == 0 {
		b.sendLongMessage(msg.Chat.ID, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ —Ñ–∞–Ω–¥–∏–Ω–≥–∞")
		return
	}

	threshold, _ := getUserThreshold(msg.Chat.ID)
	formattedRates := formatRates(rates, threshold)
	b.sendLongMessage(msg.Chat.ID, formattedRates)
}

func (b *Bot) handleMessage(msg *tgbotapi.Message) {
	if msg.Command() == "start" {
		go b.handleStart(msg)
	} else if msg.Command() == "rates" {
		go b.handleRates(msg)
	} else if msg.Command() == "subscribe" {
		go b.handleSubscribe(msg)
	} else if msg.Command() == "unsubscribe" {
		go b.handleUnsubscribe(msg)
	} else if msg.Command() == "threshold" {
		go b.handleThreshold(msg)
	}
}

func (b *Bot) handleSubscribe(msg *tgbotapi.Message) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã subscribe –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", msg.From.UserName)
	subscribersLock.Lock()
	subscribers[msg.Chat.ID] = struct{}{}
	subscribersLock.Unlock()
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	setUserThreshold(msg.Chat.ID, getDefaultThreshold())
	saveSettings()
	b.sendLongMessage(msg.Chat.ID, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
	// –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏
	go b.sendCurrentRatesToUser(msg.Chat.ID)
}

// sendCurrentRatesToUser –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (b *Bot) sendCurrentRatesToUser(chatID int64) {
	threshold, _ := getUserThreshold(chatID)
	for _, exchange := range b.exchanges {
		rates, err := exchange.GetFundingRates()
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å %s: %v", exchange.GetName(), err))
			msg.ParseMode = "MarkdownV2"
			if _, err := b.bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			}
			continue
		}
		sort.SliceStable(rates, func(i, j int) bool {
			return math.Abs(rates[i].Rate) > math.Abs(rates[j].Rate)
		})
		var exchangeRates []string
		for _, rate := range rates {
			if math.Abs(rate.Rate) >= threshold {
				log.Printf("rate=%.6f, threshold=%.6f, –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ñ–∏–ª—å—Ç—Ä", rate.Rate, threshold)
				paymentTime := rate.NextFunding
				if paymentTime != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" {
					if t, err := time.Parse(time.RFC3339, rate.NextFunding); err == nil {
						if exchange.GetName() == "HTX" {
							paymentTime = t.Format("02.01.2006 15:04")
						} else {
							paymentTime = t.Format("02.01.2006 15:04 MST")
						}
					}
				}
				payDirection := ""
				payEmoji := ""
				if rate.Rate > 0 {
					payDirection = "Long ‚Üí Short"
					payEmoji = "‚¨ÜÔ∏è"
				} else if rate.Rate < 0 {
					payDirection = "Short ‚Üí Long"
					payEmoji = "‚¨áÔ∏è"
				}
				line := fmt.Sprintf("%-12s  %+8.4f%%  %s  %-12s  (–≤—ã–ø–ª–∞—Ç–∞: %s)",
					rate.Symbol, rate.Rate*100, payEmoji, payDirection, paymentTime)
				exchangeRates = append(exchangeRates, line)
			}
		}
		if len(exchangeRates) > 0 {
			var result []string
			result = append(result, fmt.Sprintf("\nüìà %s", exchange.GetName()))
			result = append(result, exchangeRates...)
			maxRates := 20
			if len(exchangeRates) > maxRates {
				exchangeRates = exchangeRates[:maxRates]
				result = append(result, fmt.Sprintf("... –∏ –µ—â–µ %d –∑–∞–ø–∏—Å–µ–π", len(exchangeRates)-maxRates))
			}
			result = append(result, "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
			text := strings.Join(result, "\n")
			msg := tgbotapi.NewMessage(chatID, text)
			msg.ParseMode = "MarkdownV2"
			if _, err := b.bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			}
		} else {
			thresholdPercent := threshold * 100
			noRatesMsg := fmt.Sprintf("_–ù–∞ –±–∏—Ä–∂–µ %s –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫ —Ñ–∞–Ω–¥–∏–Ω–≥–∞, –ø—Ä–µ–≤—ã—à–∞—é—â–∏—Ö %.2f%%_", exchange.GetName(), thresholdPercent)
			msg := tgbotapi.NewMessage(chatID, noRatesMsg)
			msg.ParseMode = "MarkdownV2"
			if _, err := b.bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			}
		}
	}
}

func (b *Bot) handleUnsubscribe(msg *tgbotapi.Message) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã unsubscribe –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", msg.From.UserName)
	subscribersLock.Lock()
	delete(subscribers, msg.Chat.ID)
	subscribersLock.Unlock()
	saveSettings()
	b.sendLongMessage(msg.Chat.ID, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
}

func (b *Bot) startBroadcastLoop() {
	const interval = 5 * time.Minute
	b.broadcastFundingRates() // –ø–µ—Ä–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å—Ä–∞–∑—É
	for {
		next := time.Now().Add(interval)
		for {
			now := time.Now()
			if now.After(next) {
				break
			}
			left := next.Sub(now)
			log.Printf("–î–æ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å: %v", left.Truncate(time.Second))
			time.Sleep(1 * time.Minute)
		}
		b.broadcastFundingRates()
	}
}

func (b *Bot) broadcastFundingRates() {
	subscribersLock.Lock()
	ids := make([]int64, 0, len(subscribers))
	for id := range subscribers {
		ids = append(ids, id)
	}
	subscribersLock.Unlock()

	if len(ids) == 0 {
		return
	}

	rates := b.cache.GetAllRates()
	if len(rates) == 0 {
		return
	}

	for _, chatID := range ids {
		threshold, _ := getUserThreshold(chatID)
		formattedRates := formatRates(rates, threshold)
		if formattedRates != "" {
			b.sendLongMessage(chatID, formattedRates)
		}
	}
}

// sendLongMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
func (b *Bot) sendLongMessage(chatID int64, text string) {
	const maxLength = 4000

	// –ï—Å–ª–∏ –µ—Å—Ç—å <pre>...</pre> –±–ª–æ–∫–∏, —Ä–∞–∑–±–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∏–º
	if strings.Contains(text, "<pre>") {
		blocks := splitByPreBlocks(text)
		for i, block := range blocks {
			if len(block) <= maxLength {
				msg := tgbotapi.NewMessage(chatID, block)
				msg.ParseMode = "HTML"
				if _, err := b.bot.Send(msg); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–ª–æ–∫–∞ %d/%d: %v", i+1, len(blocks), err)
				}
			} else {
				// –ï—Å–ª–∏ –±–ª–æ–∫ –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (Telegram —Å–∞–º –æ–±—Ä–µ–∂–µ—Ç)
				msg := tgbotapi.NewMessage(chatID, block[:maxLength])
				msg.ParseMode = "HTML"
				if _, err := b.bot.Send(msg); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ %d/%d: %v", i+1, len(blocks), err)
				}
			}
		}
		return
	}

	// –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ –±–µ–∑ <pre>
	if len(text) <= maxLength {
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "HTML"
		if _, err := b.bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
		return
	}

	// –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
	lines := strings.Split(text, "\n")
	currentPart := ""
	parts := []string{}
	for _, line := range lines {
		if len(currentPart)+len(line)+1 > maxLength {
			if currentPart != "" {
				parts = append(parts, currentPart)
				currentPart = ""
			}
			if len(line) > maxLength {
				for i := 0; i < len(line); i += maxLength {
					end := i + maxLength
					if end > len(line) {
						end = len(line)
					}
					parts = append(parts, line[i:end])
				}
			} else {
				currentPart = line
			}
		} else {
			if currentPart != "" {
				currentPart += "\n"
			}
			currentPart += line
		}
	}
	if currentPart != "" {
		parts = append(parts, currentPart)
	}
	for i, part := range parts {
		msg := tgbotapi.NewMessage(chatID, part)
		msg.ParseMode = "HTML"
		if _, err := b.bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ %d/%d: %v", i+1, len(parts), err)
		}
	}
}

// splitByPreBlocks —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –±–ª–æ–∫–∏ –ø–æ <pre>...</pre>
func splitByPreBlocks(text string) []string {
	var blocks []string
	start := 0
	for {
		preStart := strings.Index(text[start:], "<pre>")
		if preStart == -1 {
			if start < len(text) {
				blocks = append(blocks, text[start:])
			}
			break
		}
		preStart += start
		preEnd := strings.Index(text[preStart:], "</pre>")
		if preEnd == -1 {
			// –ù–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ —Ç–µ–≥–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
			blocks = append(blocks, text[preStart:])
			break
		}
		preEnd += preStart + len("</pre>")
		if preStart > start {
			blocks = append(blocks, text[start:preStart])
		}
		blocks = append(blocks, text[preStart:preEnd])
		start = preEnd
	}
	return blocks
}

func (b *Bot) handleStart(msg *tgbotapi.Message) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", msg.From.UserName)
	text := "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞–≤–æ–∫ —Ñ–∞–Ω–¥–∏–Ω–≥–∞.\n" +
		"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
		"/rates - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞–≤–∫–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞\n" +
		"/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n" +
		"/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n" +
		"/threshold - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥\n" +
		"/threshold X.XXX - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /threshold 0.1)"

	b.sendLongMessage(msg.Chat.ID, text)
}

func formatRates(rates map[string][]exchanges.FundingRate, threshold float64) string {
	log.Printf("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–≤–æ–∫ —Å –ø–æ—Ä–æ–≥–æ–º %.6f", threshold)
	var result []string

	for exchangeName, exchangeRates := range rates {
		log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ %d —Å—Ç–∞–≤–æ–∫ —Å –±–∏—Ä–∂–∏ %s", len(exchangeRates), exchangeName)

		// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏ –ø–æ –º–æ–¥—É–ª—é
		sort.SliceStable(exchangeRates, func(i, j int) bool {
			return math.Abs(exchangeRates[i].Rate) > math.Abs(exchangeRates[j].Rate)
		})

		var formattedRates []string
		var filteredCount int
		for _, rate := range exchangeRates {
			absRate := math.Abs(rate.Rate)
			if absRate >= threshold {
				log.Printf("[%s] %s: rate=%.6f%%, threshold=%.6f%%, –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ñ–∏–ª—å—Ç—Ä",
					exchangeName, rate.Symbol, rate.Rate*100, threshold*100)
				paymentTime := rate.NextFunding
				if paymentTime != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" {
					if t, err := time.Parse(time.RFC3339, rate.NextFunding); err == nil {
						if exchangeName == "HTX" {
							paymentTime = t.Format("02.01.2006 15:04")
						} else {
							paymentTime = t.Format("02.01.2006 15:04 MST")
						}
					}
				}
				payDirection := ""
				payEmoji := ""
				if rate.Rate > 0 {
					payDirection = "Long ‚Üí Short"
					payEmoji = "‚¨ÜÔ∏è"
				} else if rate.Rate < 0 {
					payDirection = "Short ‚Üí Long"
					payEmoji = "‚¨áÔ∏è"
				}
				line := fmt.Sprintf("%-12s %+8.4f%%  %s  %-12s  (–≤—ã–ø–ª–∞—Ç–∞: %s)",
					rate.Symbol, rate.Rate*100, payEmoji, payDirection, paymentTime)
				formattedRates = append(formattedRates, line)
			} else {
				filteredCount++
			}
		}

		log.Printf("–ë–∏—Ä–∂–∞ %s: –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ %d —Å—Ç–∞–≤–æ–∫ –∏–∑ %d",
			exchangeName, filteredCount, len(exchangeRates))

		if len(formattedRates) > 0 {
			result = append(result, fmt.Sprintf("\n<b>üìà %s</b>", exchangeName))
			if len(formattedRates) > 0 {
				result = append(result, "<pre>"+strings.Join(formattedRates, "\n")+"</pre>")
			}
			maxRates := 20
			if len(formattedRates) > maxRates {
				formattedRates = formattedRates[:maxRates]
				result = append(result, fmt.Sprintf("<i>... –∏ –µ—â–µ %d –∑–∞–ø–∏—Å–µ–π</i>", len(formattedRates)-maxRates))
			}
			result = append(result, "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
		}
	}

	if len(result) == 0 {
		return "<i>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ —Ñ–∞–Ω–¥–∏–Ω–≥–∞, –ø—Ä–µ–≤—ã—à–∞—é—â–∏—Ö –ø–æ—Ä–æ–≥</i>"
	}

	return strings.Join(result, "\n")
}

// handleThreshold –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞
func (b *Bot) handleThreshold(msg *tgbotapi.Message) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã threshold –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", msg.From.UserName)

	// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã
	args := strings.TrimSpace(msg.CommandArguments())
	if args == "" {
		// –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥
		threshold, source := getUserThreshold(msg.Chat.ID)
		response := fmt.Sprintf("–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥: %.3f%% (–∏—Å—Ç–æ—á–Ω–∏–∫: %s)\n–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /threshold X.XXX",
			threshold*100, source)
		b.sendLongMessage(msg.Chat.ID, response)
		return
	}

	// –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
	args = strings.TrimSuffix(args, "%")

	// –ü–∞—Ä—Å–∏–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
	threshold, err := strconv.ParseFloat(args, 64)
	if err != nil {
		b.sendLongMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /threshold 0.1")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
	if threshold <= 0 {
		b.sendLongMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞: –ø–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
		return
	}

	// –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–±–æ–ª—å—à–µ 1), –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é –¥—Ä–æ–±—å
	if threshold > 1 {
		threshold = threshold / 100
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥
	setUserThreshold(msg.Chat.ID, threshold)

	response := fmt.Sprintf("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥: %.3f%%", threshold*100)
	b.sendLongMessage(msg.Chat.ID, response)

	// –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏ —Å –Ω–æ–≤—ã–º –ø–æ—Ä–æ–≥–æ–º
	go b.handleRates(msg)
}
